/*
 * CalcServer.java
 * This is file have class which extends Calculator server POA which is generated by java IDL  compiler from  java IDL docuemnt
 * which follow corba specifications 
 */

/**
 *
 * @author Shivanagesh Chandra <schandra@scu.edu>
 */

//Imports
import CalcApp.*;
import CalcApp.CalcPackage.*;

import org.omg.CORBA.*;
import org.omg.CosNaming.*;
import org.omg.PortableServer.*;
import org.omg.PortableServer.POA;
import org.omg.CosNaming.NamingContextPackage.*;


class CalcImpl extends CalcPOA {
    //Properties 
    private ORB orb;
   
   
    /**
    * Set ORB, it is basic for communication between client and server
    */
    public void setORB(ORB orb_value)
    {
       orb = orb_value;
    }
    //End of setORB methode
   
   @Override 
   /**
    * This method perform actual calculation, We are overriding this to provide implementation.
    * This method will take three parameters 
    * 1. Operation code(Opcode) like +,-,/,* 
    * 2. Operand 1, on which operation should performed
    * 3. Operand 2, on which operation should performed
    * it return result in double or if exception occur it will throw exception 
    */
   public double calculate(String opcode, double op1, double op2) throws DivisionByZero, CalcError
    {
        //Removing extra spaces in opcode.
        opcode = opcode.trim();
        
        //Select code depening on opcode
        switch(opcode){
            // If opcode is + then this will return addition of two numbers
            case "+": return op1+op2;
            
            // If opcode is + then this will return subtraction of two numbers
            case "-": return op1-op2;
            
            // If opcode is + then this will return subtraction of multiplication of two numbers
            case "*":return op1*op2;
            
            // If opcode is + then this will return subtraction of division of two numbers
            case "/": 
                    if(op2 == 0){
                        throw new CalcApp.CalcPackage.DivisionByZero();
                    }
                    return op1/op2;
        }
        //If opcode doesn't match with any operator that we are using then raising an exception.
        throw new CalcApp.CalcPackage.CalcError(opcode+" is not a operator");
            
    }
    // End of Calculate method
   
    /**
     * This method to shutdown ORB, We are overriding this to provide implementation.
     * It doesn't return anything.
     **/
    @Override
    public void shutdown()
    {
        try{
        orb.shutdown(false);
        orb.destroy();}
    catch(Exception e){
            
        }
        
    } 
    // End of shutdown method
}
// End of Calimpl class

// Defining server class
public class CalcServer{
    
    public static void main(String args[]){
        

        // Getting POA and Naming Serveice will give an exception using try to handle those
        try{
       
        //initiate ORB 
        ORB orb = ORB.init(args,null);
        
        //Get rootPOA and active POA manager
        POA rootpoa = POAHelper.narrow(orb.resolve_initial_references("RootPOA"));
        rootpoa.the_POAManager().activate();
     
        //Create servant and register with orb
        CalcImpl calcImpl = new CalcImpl();
        calcImpl.setORB(orb);
        
        //Get the object reference from servant 
        org.omg.CORBA.Object ref = rootpoa.servant_to_reference(calcImpl);
        Calc href = CalcHelper.narrow(ref);
        
        //Get the rootnaming context and register object in naming service 
        org.omg.CORBA.Object objRef =
                orb.resolve_initial_references("NameService");
        
        NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);
        
        // Bind the object reference to Naming Service
        String name = "Calc";
        NameComponent path[]= ncRef.to_name(name);
        ncRef.rebind(path, href);
        
        //Giving information to users, saying that server is ready
        System.out.println("Calcultor server ready and waiting ...");
         
         
        //Waiting next connection from client. Server will be alive untill Client call ShutDown method
        orb.run();
        
        }
        // End of try block
        //Handling Exceptions
        catch(Exception e){
            System.out.println("Error message:"+e.getMessage());
        }
    }
    //End of the main method

}
// End of server class
